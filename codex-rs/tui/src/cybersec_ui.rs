//! Cybersecurity-focused UI components and styling.

use ratatui::{
    prelude::*,
    widgets::{Block, Borders, Gauge, List, ListItem, Paragraph, Tabs},
};
use codex_core::cybersec::{SecurityThreat, ThreatLevel};
use codex_core::subscription::SubscriptionInfo;

/// Cybersecurity-themed colors
pub struct CyberSecTheme {
    pub primary: Color,
    pub secondary: Color,
    pub success: Color,
    pub warning: Color,
    pub danger: Color,
    pub background: Color,
    pub text: Color,
}

impl Default for CyberSecTheme {
    fn default() -> Self {
        Self {
            primary: Color::Cyan,       // Classic "hacker" cyan
            secondary: Color::Green,    // Matrix green
            success: Color::Green,
            warning: Color::Yellow,
            danger: Color::Red,
            background: Color::Black,
            text: Color::White,
        }
    }
}

pub struct SecurityDashboard {
    theme: CyberSecTheme,
    threats: Vec<SecurityThreat>,
    subscription: Option<SubscriptionInfo>,
    selected_tab: usize,
}

impl SecurityDashboard {
    pub fn new() -> Self {
        Self {
            theme: CyberSecTheme::default(),
            threats: Vec::new(),
            subscription: None,
            selected_tab: 0,
        }
    }

    pub fn update_threats(&mut self, threats: Vec<SecurityThreat>) {
        self.threats = threats;
    }

    pub fn update_subscription(&mut self, subscription: SubscriptionInfo) {
        self.subscription = Some(subscription);
    }

    pub fn next_tab(&mut self) {
        self.selected_tab = (self.selected_tab + 1) % 4; // 4 tabs total
    }

    pub fn prev_tab(&mut self) {
        self.selected_tab = if self.selected_tab == 0 { 3 } else { self.selected_tab - 1 };
    }

    pub fn render(&self, frame: &mut Frame, area: Rect) {
        let chunks = Layout::default()
            .direction(Direction::Vertical)
            .constraints([
                Constraint::Length(3), // Header
                Constraint::Length(3), // Tabs
                Constraint::Min(0),    // Content
                Constraint::Length(3), // Status bar
            ])
            .split(area);

        // Render header
        self.render_header(frame, chunks[0]);
        
        // Render tabs
        self.render_tabs(frame, chunks[1]);
        
        // Render content based on selected tab
        match self.selected_tab {
            0 => self.render_threats_view(frame, chunks[2]),
            1 => self.render_scanning_view(frame, chunks[2]),
            2 => self.render_reports_view(frame, chunks[2]),
            3 => self.render_settings_view(frame, chunks[2]),
            _ => {}
        }
        
        // Render status bar
        self.render_status_bar(frame, chunks[3]);
    }

    fn render_header(&self, frame: &mut Frame, area: Rect) {
        let ascii_art = r#"
 ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì ‚ñÑ‚ñÑ‚ñÑ‚ñÑ   ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ  
‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà ‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà    ‚ñí ‚ñì‚ñà   ‚ñÄ ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  
‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñà   ‚ñí‚ñì‚ñà    ‚ñÑ 
‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ    ‚ñí   ‚ñà‚ñà‚ñí‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí
‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë
‚ñë ‚ñë‚ñí ‚ñí  ‚ñë ‚ñà‚ñà‚ñí‚ñí‚ñí ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñë‚ñí ‚ñí  ‚ñë
"#;

        let header_text = format!("üõ°Ô∏è  CYBERSEC AI TERMINAL  üõ°Ô∏è\n{}", 
            if let Some(sub) = &self.subscription {
                if sub.is_active { "‚úÖ PRO USER" } else { "üîí FREE USER" }
            } else { "üîç LOADING..." }
        );

        let header = Paragraph::new(header_text)
            .style(Style::default().fg(self.theme.primary).add_modifier(Modifier::BOLD))
            .alignment(Alignment::Center)
            .block(Block::default()
                .borders(Borders::ALL)
                .border_style(Style::default().fg(self.theme.primary))
                .title("CyberSec AI Terminal")
                .title_style(Style::default().fg(self.theme.primary).add_modifier(Modifier::BOLD))
            );

        frame.render_widget(header, area);
    }

    fn render_tabs(&self, frame: &mut Frame, area: Rect) {
        let tab_titles = vec!["üö® Threats", "üîç Scanning", "üìä Reports", "‚öôÔ∏è Settings"];
        
        let tabs = Tabs::new(tab_titles)
            .block(Block::default().borders(Borders::ALL).border_style(Style::default().fg(self.theme.secondary)))
            .select(self.selected_tab)
            .style(Style::default().fg(self.theme.text))
            .highlight_style(Style::default().fg(self.theme.primary).add_modifier(Modifier::BOLD));

        frame.render_widget(tabs, area);
    }

    fn render_threats_view(&self, frame: &mut Frame, area: Rect) {
        if self.threats.is_empty() {
            let no_threats = Paragraph::new("‚úÖ No active threats detected\n\nYour system appears to be secure.")
                .style(Style::default().fg(self.theme.success))
                .alignment(Alignment::Center)
                .block(Block::default()
                    .borders(Borders::ALL)
                    .border_style(Style::default().fg(self.theme.success))
                    .title("Threat Status")
                );
            frame.render_widget(no_threats, area);
            return;
        }

        let chunks = Layout::default()
            .direction(Direction::Horizontal)
            .constraints([Constraint::Percentage(50), Constraint::Percentage(50)])
            .split(area);

        // Left side - threat list
        let threat_items: Vec<ListItem> = self.threats.iter()
            .map(|threat| {
                let color = match threat.threat_level {
                    ThreatLevel::Critical => self.theme.danger,
                    ThreatLevel::High => Color::LightRed,
                    ThreatLevel::Medium => self.theme.warning,
                    ThreatLevel::Low => Color::LightYellow,
                    ThreatLevel::None => self.theme.text,
                };
                
                let text = format!("{} {} [{}]", 
                    threat.threat_level.emoji(),
                    threat.threat_type,
                    threat.threat_level.as_str()
                );
                
                ListItem::new(text).style(Style::default().fg(color))
            })
            .collect();

        let threat_list = List::new(threat_items)
            .block(Block::default()
                .borders(Borders::ALL)
                .border_style(Style::default().fg(self.theme.danger))
                .title("Active Threats")
            );

        frame.render_widget(threat_list, chunks[0]);

        // Right side - threat details
        if let Some(threat) = self.threats.first() {
            let details = format!(
                "Type: {}\nLevel: {}\nConfidence: {:.0}%\n\nDescription:\n{}\n\nRecommendations:\n{}",
                threat.threat_type,
                threat.threat_level.as_str(),
                threat.confidence * 100.0,
                threat.description,
                threat.recommendations.iter()
                    .enumerate()
                    .map(|(i, rec)| format!("{}. {}", i + 1, rec))
                    .collect::<Vec<_>>()
                    .join("\n")
            );

            let threat_details = Paragraph::new(details)
                .style(Style::default().fg(self.theme.text))
                .wrap(ratatui::widgets::Wrap { trim: true })
                .block(Block::default()
                    .borders(Borders::ALL)
                    .border_style(Style::default().fg(self.theme.primary))
                    .title("Threat Details")
                );

            frame.render_widget(threat_details, chunks[1]);
        }
    }

    fn render_scanning_view(&self, frame: &mut Frame, area: Rect) {
        let chunks = Layout::default()
            .direction(Direction::Vertical)
            .constraints([
                Constraint::Length(5),  // Scan controls
                Constraint::Length(3),  // Progress
                Constraint::Min(0),     // Results
            ])
            .split(area);

        // Scan controls
        let controls_text = "üîç Available Scans:\n\n‚Ä¢ Quick Scan (Ctrl+Q) - Fast security check\n‚Ä¢ Full Scan (Ctrl+F) - Complete system analysis\n‚Ä¢ Custom Scan (Ctrl+C) - Target specific directories";
        
        let controls = Paragraph::new(controls_text)
            .style(Style::default().fg(self.theme.text))
            .block(Block::default()
                .borders(Borders::ALL)
                .border_style(Style::default().fg(self.theme.secondary))
                .title("Scan Controls")
            );

        frame.render_widget(controls, chunks[0]);

        // Progress bar (mock)
        let progress = Gauge::default()
            .block(Block::default()
                .borders(Borders::ALL)
                .border_style(Style::default().fg(self.theme.primary))
                .title("Scan Progress")
            )
            .gauge_style(Style::default().fg(self.theme.primary))
            .percent(0)
            .label("Ready to scan");

        frame.render_widget(progress, chunks[1]);

        // Scan results
        let results_text = if let Some(sub) = &self.subscription {
            if sub.is_active {
                "üìã Recent Scan Results:\n\n‚úÖ System files: Clean\n‚úÖ Registry: No threats\n‚ö†Ô∏è  Downloads folder: 2 suspicious files quarantined\n‚úÖ Running processes: All verified\n\nLast scan: Just now"
            } else {
                "üîí Advanced scanning requires a subscription.\n\nWith a CyberSec Pro subscription, you get:\n‚Ä¢ Real-time threat monitoring\n‚Ä¢ Advanced malware detection\n‚Ä¢ Automated threat remediation\n‚Ä¢ Detailed security reports\n\nUpgrade now to unlock full protection!"
            }
        } else {
            "üîÑ Loading scan capabilities..."
        };

        let results = Paragraph::new(results_text)
            .style(Style::default().fg(if self.subscription.as_ref().map_or(false, |s| s.is_active) {
                self.theme.text
            } else {
                self.theme.warning
            }))
            .wrap(ratatui::widgets::Wrap { trim: true })
            .block(Block::default()
                .borders(Borders::ALL)
                .border_style(Style::default().fg(self.theme.secondary))
                .title("Scan Results")
            );

        frame.render_widget(results, chunks[2]);
    }

    fn render_reports_view(&self, frame: &mut Frame, area: Rect) {
        let is_pro = self.subscription.as_ref().map_or(false, |s| s.is_active);
        
        let content = if is_pro {
            "üìä Security Reports\n\nüü¢ Security Score: 87/100\n\nüìà Threat Trends (Last 7 days):\n‚Ä¢ Malware detections: 3 (‚Üì 40%)\n‚Ä¢ Suspicious activity: 12 (‚Üë 15%)\n‚Ä¢ Blocked connections: 156 (‚Üì 5%)\n\nüìã Available Reports:\n‚Ä¢ Daily Security Summary\n‚Ä¢ Weekly Threat Analysis\n‚Ä¢ Monthly Security Audit\n‚Ä¢ Custom Report Builder\n\nPress 'E' to export current report"
        } else {
            "üîí Security Reports - Pro Feature\n\nUpgrade to CyberSec Pro to access:\n\nüìä Real-time security scoring\nüìà Threat trend analysis\nüìã Detailed security reports\nüì§ Report export capabilities\nüìß Email alerts\nüîç Historical threat data\n\nYour security matters. Upgrade today!"
        };

        let reports = Paragraph::new(content)
            .style(Style::default().fg(if is_pro { self.theme.text } else { self.theme.warning }))
            .wrap(ratatui::widgets::Wrap { trim: true })
            .block(Block::default()
                .borders(Borders::ALL)
                .border_style(Style::default().fg(if is_pro { self.theme.success } else { self.theme.warning }))
                .title("Security Reports")
            );

        frame.render_widget(reports, area);
    }

    fn render_settings_view(&self, frame: &mut Frame, area: Rect) {
        let subscription_status = if let Some(sub) = &self.subscription {
            if sub.is_active {
                format!("‚úÖ {} - Active", sub.plan_name)
            } else {
                "‚ùå Free Plan - Limited Features".to_string()
            }
        } else {
            "üîÑ Loading subscription status...".to_string()
        };

        let content = format!(
            "‚öôÔ∏è Settings & Configuration\n\nüîê Subscription Status:\n{}\n\nüõ°Ô∏è Security Settings:\n‚Ä¢ Real-time protection: Enabled\n‚Ä¢ Clipboard monitoring: Enabled\n‚Ä¢ Network scanning: {}\n‚Ä¢ Auto-quarantine: {}\n\nüîß System Info:\n‚Ä¢ OS: {}\n‚Ä¢ Scanner version: 1.0.0\n‚Ä¢ Last update: Today\n\nüìû Support:\n‚Ä¢ Email: support@cybersec-ai.com\n‚Ä¢ Docs: Press 'H' for help\n‚Ä¢ Upgrade: Press 'U' to upgrade",
            subscription_status,
            if self.subscription.as_ref().map_or(false, |s| s.is_active) { "Enabled" } else { "Requires Pro" },
            if self.subscription.as_ref().map_or(false, |s| s.is_active) { "Enabled" } else { "Requires Pro" },
            std::env::consts::OS
        );

        let settings = Paragraph::new(content)
            .style(Style::default().fg(self.theme.text))
            .wrap(ratatui::widgets::Wrap { trim: true })
            .block(Block::default()
                .borders(Borders::ALL)
                .border_style(Style::default().fg(self.theme.secondary))
                .title("Settings")
            );

        frame.render_widget(settings, area);
    }

    fn render_status_bar(&self, frame: &mut Frame, area: Rect) {
        let threat_count = self.threats.len();
        let highest_level = if threat_count > 0 {
            self.threats.iter()
                .map(|t| &t.threat_level)
                .max_by_key(|level| match level {
                    ThreatLevel::None => 0,
                    ThreatLevel::Low => 1,
                    ThreatLevel::Medium => 2,
                    ThreatLevel::High => 3,
                    ThreatLevel::Critical => 4,
                })
                .cloned()
                .unwrap_or(ThreatLevel::None)
        } else {
            ThreatLevel::None
        };

        let status_text = if threat_count == 0 {
            "üü¢ SECURE - No threats detected | Use ‚Üê ‚Üí to navigate tabs | Press 'q' to quit"
        } else {
            "üî¥ THREATS DETECTED - Immediate attention required | Use ‚Üê ‚Üí to navigate tabs"
        };

        let status_color = if threat_count == 0 { self.theme.success } else { self.theme.danger };

        let status_bar = Paragraph::new(status_text)
            .style(Style::default().fg(status_color).add_modifier(Modifier::BOLD))
            .alignment(Alignment::Center)
            .block(Block::default()
                .borders(Borders::ALL)
                .border_style(Style::default().fg(status_color))
            );

        frame.render_widget(status_bar, area);
    }
}

impl Default for SecurityDashboard {
    fn default() -> Self {
        Self::new()
    }
}

